- hosts: host
  user: root
  tasks:
  - name: yum update
    yum:
      name: '*'
      state: latest

  - name: create group
    group:
      name: webpage

  - name: create user
    user:
      name: '{{ user }}'
      password: "{{ password | password_hash('sha512') }}"
      append: yes
      groups: wheel, webpage

  - name: add authorized_key
    authorized_key:
      user: "{{ user }}"
      key: "{{ lookup('file', '~/.ssh/id_ed25519.pub') }}"

  - name: mkdir git-repository
    file:
      path: '{{ item }}'
      state: directory
      group: webpage
      owner: '{{ user }}'
      recurse: yes
    with_items:
      - /usr/share/nginx/git
      - /usr/share/nginx/git/profile.git

  - name: git --bare init --shared
    command:
      cmd: 'git --bare init --shared'
      chdir: /usr/share/nginx/git/profile.git

  - name: git clone
    command:
      cmd: 'git clone /usr/share/nginx/git/profile.git'
      chdir: /usr/share/nginx/html
    failed_when: no

  - name: modify nginx default.conf
    lineinfile:
      dest: /etc/nginx/conf.d/default.conf
      firstmatch: yes
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    with_items:
      - regexp: '^.*root.*/usr/share/nginx/html.*'
        line: '        root   /usr/share/nginx/html/profile;'
      - regexp: '^.*server_name.*localhost.*'
        line: '    server_name  yuya-hanzawa.com;'

  - name: modify and delete nginx nginx.conf 
    lineinfile:
      dest: /etc/nginx/nginx.conf
      state: absent
      regexp: "{{ item }}"
    with_items:
      - '^.*remote_addr.*'
      - '^.*status.*'
      - '^.*http_user_agent.*'

  - name: modify and add nginx nginx.conf 
    blockinfile:
      dest: /etc/nginx/nginx.conf
      insertafter: '.*application/octet-stream;'
      block: |2
            log_format json escape=json '{"time": "$time_iso8601",'
                                         '"host": "$remote_addr",'
                                         '"vhost": "$host",'
                                         '"user": "$remote_user",'
                                         '"status": "$status",'
                                         '"protocol": "$server_protocol",'
                                         '"method": "$request_method",'
                                         '"path": "$request_uri",'
                                         '"req": "$request",'
                                         '"size": "$body_bytes_sent",'
                                         '"reqtime": "$request_time",'
                                         '"apptime": "$upstream_response_time",'
                                         '"ua": "$http_user_agent",'
                                         '"forwardedfor": "$http_x_forwarded_for",'
                                         '"forwardedproto": "$http_x_forwarded_proto",'
                                         '"referrer": "$http_referer"}';

  - name: modify nginx nginx.conf
    lineinfile:
      dest: /etc/nginx/nginx.conf
      regexp: '.*/var/log/nginx/access.log.*'
      line: '    access_log /var/log/nginx/access.log json;'

  - name: create git-hooks file
    copy:
      dest: /usr/share/nginx/git/profile.git/hooks/post-receive
      content: |
          cd /usr/share/nginx/html/profile
          git --git-dir=.git pull 
    
  - name: configure git-hooks directory owner and permission
    file:
      path: /usr/share/nginx/git/profile.git/hooks/post-receive
      mode: '755' 

  - name: configure nginx directory owner and permission
    file:
      path: '{{ item }}'
      group: webpage
      owner: '{{ user }}'
      mode: '775' 
      recurse: yes
    with_items:
      - /usr/share/nginx
      - /var/log/nginx

  - name: modify sshd_config
    lineinfile:
      dest: /etc/ssh/sshd_config
      state: present
      regexp: '{{ item.regexp }}'
      line: '{{ item.line }}'
    with_items:
      - regexp: '^#Port.*'
        line: 'Port {{ port }}'
      - regexp: '^#PermitRootLogin.*'
        line: 'PermitRootLogin no'
      - regexp: '^#PermitEmptyPasswords.*'
        line: 'PermitEmptyPasswords no'
  
  - name: restart sshd
    service:
      name: sshd
      state: restarted

  - name: started firewall
    systemd:
      name: firewalld
      state: started
      enabled: yes

  - name: firewalld enable ssh port
    firewalld:
      port: '{{ port }}/tcp'
      permanent: yes
      state: enabled
      immediate: true

  - name: firewalld disabled ssh
    firewalld:
      service: ssh
      permanent: yes
      state: disabled
      immediate: true
  
  - name: firewalld enable http, https
    firewalld:
      service: "{{ item }}"
      permanent: yes
      state: enabled
      immediate: true
    with_items:
      - http
      - https
