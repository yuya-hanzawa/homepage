- name: set up target server 
  hosts: host
  user: '{{ user }}'
  become: true
  become_user: root
  tasks:
  - name: Update Packages
    yum:
      name: '*'
      state: latest

  - name: Create Repository For Web Pages
    file:
      path: '/usr/share/nginx/html'
      state: directory
      group: wheel
      owner: '{{ user }}'
      recurse: yes

  - name: Clone Source Code
    ansible.builtin.git:
      repo: git@github.com:zawa1120/homepage.git
      dest: /usr/share/nginx/html/homepage
      accept_hostkey: true

  - name: Change Permission And Owner of Cloned File
    file:
      path: /usr/share/nginx/html
      group: wheel
      owner: '{{ user }}'
      mode: '775' 
      recurse: yes

  - name: Reflect Cloned File
    lineinfile:
      dest: /etc/nginx/conf.d/default.conf
      firstmatch: yes
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    with_items:
      - regexp: '^.*root.*/usr/share/nginx/html.*'
        line: '        root   /usr/share/nginx/html/homepage;'
      - regexp: '^.*server_name.*localhost.*'
        line: '    server_name  yuya-hanzawa.com;'

  - name: Change https Configuration File
    lineinfile:
      dest: /etc/nginx/conf.d/https.conf 
      firstmatch: yes
      regexp: '^.*root.*/usr/share/nginx/html.*'
      line: '        root   /usr/share/nginx/html/homepage;'

  - name: Delete Unneeded Log Columns
    lineinfile:
      dest: /etc/nginx/nginx.conf
      state: absent
      regexp: "{{ item }}"
    with_items:
      - '^.*remote_addr.*'
      - '^.*status.*'
      - '^.*http_user_agent.*'

  - name: Select Log Columns
    blockinfile:
      dest: /etc/nginx/nginx.conf
      insertafter: '.*application/octet-stream;'
      block: |2
            log_format json escape=json '{"time": "$time_iso8601",'
                                         '"remote_host": "$remote_addr",'
                                         '"host": "$host",'
                                         '"user": "$remote_user",'
                                         '"status": "$status",'
                                         '"protocol": "$server_protocol",'
                                         '"method": "$request_method",'
                                         '"path": "$request_uri",'
                                         '"size": "$body_bytes_sent",'
                                         '"request_time": "$request_time",'
                                         '"upstream_time": "$upstream_response_time",'
                                         '"user_agent": "$http_user_agent",'
                                         '"forwardedfor": "$http_x_forwarded_for",'
                                         '"forwardedproto": "$http_x_forwarded_proto",'
                                         '"referrer": "$http_referer"}';

  - name: Change Log File Format
    lineinfile:
      dest: /etc/nginx/nginx.conf
      regexp: '.*/var/log/nginx/access.log.*'
      line: '    access_log /var/log/nginx/access.log json;'

  - name: Change Log File Permission And Save Period
    lineinfile:
      dest: /etc/logrotate.d/nginx
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    with_items:
      - regexp: '.*create.*'
        line: '        create 775 {{ user }} wheel'
      - regexp: '.*52.*'
        line: '        rotate 7'

  - name: Compression Free
    lineinfile:
      dest: /etc/logrotate.d/nginx
      state: absent
      regexp: '.*compress.*'

  - name: Reflect logrotate Settings
    command:
      cmd: 'logrotate -f /etc/logrotate.d/nginx'

  - name: Change ssh Settings
    lineinfile:
      dest: /etc/ssh/sshd_config
      regexp: '{{ item.regexp }}'
      line: '{{ item.line }}'
    with_items:
      - regexp: '^#Port.*'
        line: 'Port {{ port }}'
      - regexp: '^#PermitRootLogin.*'
        line: 'PermitRootLogin no'
      - regexp: '^#PermitEmptyPasswords.*'
        line: 'PermitEmptyPasswords no'

  - name: Reflect ssh Settings
    service:
      name: sshd
      state: restarted

  - name: Enable firewall
    systemd:
      name: firewalld
      state: started
      enabled: yes

  - name: Enable firewalld of ssh port
    firewalld:
      port: '{{ port }}/tcp'
      permanent: yes
      state: enabled
      immediate: true

  - name: Disabled firewalld of Default ssh port
    firewalld:
      service: ssh
      permanent: yes
      state: disabled
      immediate: true
  
  - name: Enable firewalld http And https
    firewalld:
      service: "{{ item }}"
      permanent: yes
      state: enabled
      immediate: true
    with_items:
      - http
      - https

  - name: Reflect nginx Settings
    service:
      name: nginx
      state: restarted
